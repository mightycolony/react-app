# for super user permission to run docker
sudo: required
language: node_js
node_js: 14
services: 
     -docker:


#install before packages before run test or to production                 
before_install:
     - docker build -t travis/image -f Dockerfile.dev .
#travis/image image/docker going to run only for the travis process

#for running test 
#travis-ci will watch this script output and if something fails and provide status code 1 or something the build/test is broken/failed
script:
      - docker run -e CI=true  travis/image npm run test -- --coverage

#-- --coverage inorder to remove the hang and end of the test

#deploying state
deploy
#provider aws(elasticbeanstalk im using),digitalocean..
   provider: elasticbeanstalk
   region: "ap-south-1"
   app:  "docker-react"
   env: "Dockerreact-env"
   bucket_name: "elasticbeanstalk-ap-south-1-574938868010"
   bucket_path: "docker-react"
   on: 
     branch: main
   access_key_id: $AWS_ACCESS_KEY 
   secret_access_key: "$AWS_SECRET_KEY"
#application name created in elasticbeanstalk
#env - which we given while created on elasticbeanstalk app creation
#bucket_name: which is automatically created on elasticbeanstalk app creation
#bucket_path: the name we given docker-react will not be created untill we deploy
#on:brach:main - refers to when we push code to main(i used)/master on that time deploy will work
#aboce access and secert keys are generate from aws iam for that elasticbeanstalk and added in env in travis-ci and adding here
